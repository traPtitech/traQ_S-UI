import { isDefined } from '/@/lib/basic/array'
import { generateNavigatorLabels } from '/@/lib/pagination'

describe('pagination', () => {
  describe('generateNavigatorLabels', () => {
    Object.entries(TESTS).forEach(([total, cases]) => {
      describe(`${total} pages`, () =>
        [...Array(Number(total) + 20).keys()]
          .map(value => value - 10)
          .forEach(current => {
            it(`current page: ${current}`, () => {
              const run = () => generateNavigatorLabels(current, Number(total))
              if (isDefined(cases[current])) {
                expect(run()).toEqual(cases[current])
              } else {
                expect(run).toThrowError(
                  `current page (${current}) is out of range`
                )
              }
            })
          }))
    })
  })
})

const TESTS = {
  0: [],
  1: [[0]],
  2: [
    [0, 1],
    [0, 1]
  ],
  3: [
    [0, 1, 2],
    [0, 1, 2],
    [0, 1, 2]
  ],
  4: [
    [0, 1, 2, 3],
    [0, 1, 2, 3],
    [0, 1, 2, 3],
    [0, 1, 2, 3]
  ],
  5: [
    [0, 1, 2, 3, 4],
    [0, 1, 2, 3, 4],
    [0, 1, 2, 3, 4],
    [0, 1, 2, 3, 4],
    [0, 1, 2, 3, 4]
  ],
  6: [
    [0, 1, 2, 3, 4, 5],
    [0, 1, 2, 3, 4, 5],
    [0, 1, 2, 3, 4, 5],
    [0, 1, 2, 3, 4, 5],
    [0, 1, 2, 3, 4, 5],
    [0, 1, 2, 3, 4, 5]
  ],
  7: [
    [0, 1, 2, 3, 4, 5, 6],
    [0, 1, 2, 3, 4, 5, 6],
    [0, 1, 2, 3, 4, 5, 6],
    [0, 1, 2, 3, 4, 5, 6],
    [0, 1, 2, 3, 4, 5, 6],
    [0, 1, 2, 3, 4, 5, 6],
    [0, 1, 2, 3, 4, 5, 6]
  ],
  8: [
    [0, 1, 2, 3, 4, '...', 7],
    [0, 1, 2, 3, 4, '...', 7],
    [0, 1, 2, 3, 4, '...', 7],
    [0, 1, 2, 3, 4, 5, '...', 7],
    [0, '...', 2, 3, 4, 5, 6, 7],
    [0, '...', 3, 4, 5, 6, 7],
    [0, '...', 4, 5, 6, 7],
    [0, '...', 5, 6, 7]
  ],
  9: [
    [0, 1, 2, '...', 8],
    [0, 1, 2, 3, '...', 8],
    [0, 1, 2, 3, 4, '...', 8],
    [0, 1, 2, 3, 4, 5, '...', 8],
    [0, 1, 2, 3, 4, 5, 6, 7, 8],
    [0, '...', 3, 4, 5, 6, 7, 8],
    [0, '...', 4, 5, 6, 7, 8],
    [0, '...', 5, 6, 7, 8],
    [0, '...', 6, 7, 8]
  ],
  10: [
    [0, 1, 2, '...', 9],
    [0, 1, 2, 3, '...', 9],
    [0, 1, 2, 3, 4, '...', 9],
    [0, 1, 2, 3, 4, 5, '...', 9],
    [0, 1, 2, 3, 4, 5, 6, '...', 9],
    [0, '...', 3, 4, 5, 6, 7, 8, 9],
    [0, '...', 4, 5, 6, 7, 8, 9],
    [0, '...', 5, 6, 7, 8, 9],
    [0, '...', 6, 7, 8, 9],
    [0, '...', 7, 8, 9]
  ],
  11: [
    [0, 1, 2, '...', 10],
    [0, 1, 2, 3, '...', 10],
    [0, 1, 2, 3, 4, '...', 10],
    [0, 1, 2, 3, 4, 5, '...', 10],
    [0, 1, 2, 3, 4, 5, 6, '...', 10],
    [0, '...', 3, 4, 5, 6, 7, '...', 10],
    [0, '...', 4, 5, 6, 7, 8, 9, 10],
    [0, '...', 5, 6, 7, 8, 9, 10],
    [0, '...', 6, 7, 8, 9, 10],
    [0, '...', 7, 8, 9, 10],
    [0, '...', 8, 9, 10]
  ],
  12: [
    [0, 1, 2, '...', 11],
    [0, 1, 2, 3, '...', 11],
    [0, 1, 2, 3, 4, '...', 11],
    [0, 1, 2, 3, 4, 5, '...', 11],
    [0, 1, 2, 3, 4, 5, 6, '...', 11],
    [0, '...', 3, 4, 5, 6, 7, '...', 11],
    [0, '...', 4, 5, 6, 7, 8, '...', 11],
    [0, '...', 5, 6, 7, 8, 9, 10, 11],
    [0, '...', 6, 7, 8, 9, 10, 11],
    [0, '...', 7, 8, 9, 10, 11],
    [0, '...', 8, 9, 10, 11],
    [0, '...', 9, 10, 11]
  ],
  20: [
    [0, 1, 2, '...', 19],
    [0, 1, 2, 3, '...', 19],
    [0, 1, 2, 3, 4, '...', 19],
    [0, 1, 2, 3, 4, 5, '...', 19],
    [0, 1, 2, 3, 4, 5, 6, '...', 19],
    [0, '...', 3, 4, 5, 6, 7, '...', 19],
    [0, '...', 4, 5, 6, 7, 8, '...', 19],
    [0, '...', 5, 6, 7, 8, 9, '...', 19],
    [0, '...', 6, 7, 8, 9, 10, '...', 19],
    [0, '...', 7, 8, 9, 10, 11, '...', 19],
    [0, '...', 8, 9, 10, 11, 12, '...', 19],
    [0, '...', 9, 10, 11, 12, 13, '...', 19],
    [0, '...', 10, 11, 12, 13, 14, '...', 19],
    [0, '...', 11, 12, 13, 14, 15, '...', 19],
    [0, '...', 12, 13, 14, 15, 16, '...', 19],
    [0, '...', 13, 14, 15, 16, 17, 18, 19],
    [0, '...', 14, 15, 16, 17, 18, 19],
    [0, '...', 15, 16, 17, 18, 19],
    [0, '...', 16, 17, 18, 19],
    [0, '...', 17, 18, 19]
  ]
}
